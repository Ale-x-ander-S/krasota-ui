import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { HeaderComponent } from '../../components/header/header.component';
import { FooterComponent } from '../../components/footer';
import { CategoryService, Category } from '../../services/category.service';
import { ProductService, Product } from '../../services/product.service';
import { CartAnimationService } from '../../services/cart-animation.service';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤: Category –∏–∑ CategoryService, Product –∏–∑ ProductService

@Component({
  selector: 'app-categories',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule, HeaderComponent, FooterComponent],
  templateUrl: './categories.component.html',
  styleUrls: ['./categories.component.scss']
})
export class CategoriesComponent implements OnInit {
  showMobileMenu: boolean = false;
  categories: Category[] = [];
  products: Product[] = [];
  selectedCategory: string = '';
  searchTerm: string = '';
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  categoriesLoading: boolean = false;
  categoriesError: string = '';
  productsLoading: boolean = false;
  productsError: string = '';

  constructor(
    private router: Router,
    private categoryService: CategoryService,
    private productService: ProductService,
    private cartAnimationService: CartAnimationService
  ) {}

  ngOnInit() {
    this.loadCategories();
    this.loadProducts();
  }

  loadCategories() {
    this.categoriesLoading = true;
    this.categoriesError = '';

    this.categoryService.getCategories().subscribe({
      next: (categories) => {
        this.categories = categories.filter(cat => cat.is_active); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.categoriesLoading = false;
        console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', categories);
      },
      error: (error) => {
        this.categoriesError = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ' + (error.error?.message || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        this.categoriesLoading = false;
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      }
    });
  }

  loadProducts() {
    this.productsLoading = true;
    this.productsError = '';

    this.productService.getProducts().subscribe({
      next: (response) => {
        this.products = response.products;
        this.productsLoading = false;
        console.log('–¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response);
      },
      error: (error) => {
        this.productsError = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ' + (error.error?.message || error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        this.productsLoading = false;
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      }
    });
  }

  getTotalProducts(): number {
    return this.products.length;
  }

  getTotalInStock(): number {
    return this.products.filter(p => p.stock > 0).length;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getCategoryProductCount(categoryId: number): number {
    return this.products.filter(p => p.category_id === categoryId).length;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getCategoryProducts(categoryId: number): Product[] {
    return this.products.filter(p => p.category_id === categoryId);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ API)
  getCategoryIcon(categoryName: string): string {
    const icons: { [key: string]: string } = {
      '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': 'üì±',
      '–û–¥–µ–∂–¥–∞': 'üëï', 
      '–û–±—É–≤—å': 'üëü',
      '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã': 'üëú',
      '–ö—Ä–∞—Å–æ—Ç–∞': 'üíÑ',
      '–ö–æ—Å–º–µ—Ç–∏–∫–∞': 'üíÑ',
      '–£—Ö–æ–¥': 'üß¥',
      '–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è': 'üå∏'
    };
    return icons[categoryName] || 'üì¶';
  }

  getFilteredCategories(): Category[] {
    let filtered = this.categories;

    if (this.selectedCategory) {
      filtered = filtered.filter(cat => cat.name === this.selectedCategory);
    }

    if (this.searchTerm) {
      filtered = filtered.filter(cat => 
        cat.name.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        cat.description.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    }

    return filtered;
  }

  getFilteredProducts(category: Category): Product[] {
    let categoryProducts = this.getCategoryProducts(category.id);
    
    if (!this.searchTerm) return categoryProducts.slice(0, 3); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
    
    return categoryProducts.filter(product =>
      product.name.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
      product.description.toLowerCase().includes(this.searchTerm.toLowerCase())
    ).slice(0, 3);
  }

  onCategoryChange() {
    // –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  }

  onSearchChange() {
    // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
  }

  clearFilters() {
    this.selectedCategory = '';
    this.searchTerm = '';
  }

  toggleMobileMenu() {
    this.showMobileMenu = !this.showMobileMenu;
  }

  closeMobileMenu() {
    this.showMobileMenu = false;
  }

  formatPrice(price: number): string {
    return price.toLocaleString('ru-RU') + ' ‚ÇΩ';
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏
  isProductInStock(product: Product): boolean {
    return product.stock > 0;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  onImageError(event: any): void {
    event.target.src = 'assets/images/placeholder.svg';
  }

  goToProduct(productId: number) {
    this.router.navigate(['/product', productId]);
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  goToCategoryProducts(categoryId: number, categoryName: string) {
    this.router.navigate(['/products'], { 
      queryParams: { 
        category_id: categoryId,
        category_name: categoryName 
      } 
    });
  }

  getCartItemCount(): number {
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    return Math.floor(Math.random() * 5) + 1;
  }

  goToCart(): void {
    this.router.navigate(['/cart']);
  }
}
